class Platform {
    event Create() {
        if (this.PropertyExists("filter") && !(this.PropertyGet("filter") & Mode_MANIA)) {
            this.Active = false;
            return;
        }

        this.Priority = DrawGroup_FGLow_Low + 1;

        this.Type = 0;
        this.AmplitudeX = 0.0;
        this.AmplitudeY = 0.0;
        this.Speed = 0;
        this.HasTension = 0;
        this.FrameID = 0;
        this.Collision = 0;
        this.TileOriginX = 0.0;
        this.TileOriginY = 0.0;
        this.ChildCount = 0;
        this.Angle = 0;
        this.Rotation = 0;
        this.Status = null;
        this.CollisionStatus = null;
        this.Visible = true;

        this.OnScreenHitboxW = 0.0;
        this.OnScreenHitboxH = 0.0;

        this.StartX = this.X;
        this.StartY = this.Y;
        this.FinalX = this.X;
        this.FinalY = this.Y;
        this.TensionValue = 0;
        this.PlayerAtop = false;
        this.PlayerOnTopFlag = 0;
        this.PlayerOnLeftFlag = 0;
        this.PlayerOnRightFlag = 0;
        this.PlayerOnBottomFlag = 0;

        this.DeltaX = 0.0;
        this.DeltaY = 0.0;
        this.PossibleTimerUntilDrop = 0;

        if (this.PropertyExists("type"))
            this.Type = this.PropertyGet("type");
        if (this.PropertyExists("amplitude")) {
            var amplitude = this.PropertyGet("amplitude");
            this.AmplitudeX = amplitude[0];
            this.AmplitudeY = amplitude[1];
        }
        if (this.PropertyExists("speed"))
            this.Speed = this.PropertyGet("speed");
        if (this.PropertyExists("hasTension"))
            this.HasTension = this.PropertyGet("hasTension");
        if (this.PropertyExists("frameID"))
            this.FrameID = this.PropertyGet("frameID");
        if (this.PropertyExists("collision"))
            this.Collision = this.PropertyGet("collision");
        if (this.PropertyExists("tileOrigin")) {
            var tileOrigin = this.PropertyGet("tileOrigin");
            this.TileOriginX = tileOrigin[0];
            this.TileOriginY = tileOrigin[1];
        }
        if (this.PropertyExists("childCount"))
            this.ChildCount = this.PropertyGet("childCount");
        if (this.PropertyExists("angle"))
            this.Angle = this.PropertyGet("angle");

        this.SFX_Push = Resources.LoadSound("SoundFX/Global/Push.wav", SCOPE_SCENE);

        // /*
        var animation = 0;
        var sceneName = Scene.GetName();
        if (String.Contains(sceneName, "SPZ1"))
            this.Sprite = Resources.LoadSprite("Sprites/SPZ1/Platform.bin", SCOPE_SCENE);
        else if (String.Contains(sceneName, "SPZ2"))
            this.Sprite = Resources.LoadSprite("Sprites/SPZ2/Platform.bin", SCOPE_SCENE);
        else if (String.Contains(sceneName, "GHZ")) {
            this.Sprite = Resources.LoadSprite("Sprites/GHZ/Platform.bin", SCOPE_SCENE);

            if (animation == 0 && this.FrameID >= 4) {
                animation++; this.FrameID -= 4;
            }
        }
        else if (String.Contains(sceneName, "MMZ")) {
            this.Sprite = Resources.LoadSprite("Sprites/MMZ/Platform.bin", SCOPE_SCENE);

            if (animation == 0 && this.FrameID >= 6) {
                animation++; this.FrameID -= 6;
            }
            if (animation == 1 && this.FrameID >= 3) {
                animation++; this.FrameID -= 3;
            }
            if (animation == 2 && this.FrameID >= 7) {
                animation++; this.FrameID -= 7;
            }
            if (animation == 3 && this.FrameID >= 4) {
                animation++; this.FrameID -= 4;
            }
        }
        else if (String.Contains(sceneName, "CPZ")) {
            this.Sprite = Resources.LoadSprite("Sprites/CPZ/Platform.bin", SCOPE_SCENE);
            if (animation == 0 && this.FrameID >= 7) {
                animation++; this.FrameID -= 7;
            }
            if (animation == 1 && this.FrameID >= 7) {
                animation++; this.FrameID -= 7;
            }
        }
        else if (String.Contains(sceneName, "FBZ")) {
            this.Sprite = Resources.LoadSprite("Sprites/FBZ/Platform.bin", SCOPE_SCENE);
            this.SFX_Clack2 = Resources.LoadSound("SoundFX/Stage/Clack2.wav", SCOPE_SCENE);

            if (animation == 0 && this.FrameID >= 6) {
                animation++; this.FrameID -= 6;
            }
            if (animation == 1 && this.FrameID >= 9) {
                animation++; this.FrameID -= 9;
            }
            if (animation == 2 && this.FrameID >= 5) {
                animation++; this.FrameID -= 5;
            }
            if (animation == 3 && this.FrameID >= 3) {
                animation++; this.FrameID -= 3;
            }
            if (animation == 4 && this.FrameID >= 4) {
                animation++; this.FrameID -= 4;
            }
            if (animation == 5 && this.FrameID >= 6) {
                animation++; this.FrameID -= 6;
            }
        }
        else if (String.Contains(sceneName, "PSZ1")) {
            this.Sprite = Resources.LoadSprite("Sprites/PSZ1/Platform.bin", SCOPE_SCENE);

            if (animation == 0 && this.FrameID >= 3) {
                animation++; this.FrameID -= 3;
            }
            if (animation == 1 && this.FrameID >= 3) {
                animation++; this.FrameID -= 3;
            }
        }
        else if (String.Contains(sceneName, "PSZ2")) {
            this.Sprite = Resources.LoadSprite("Sprites/PSZ2/Platform.bin", SCOPE_SCENE);

            if (animation == 0 && this.FrameID >= 3) {
                animation++; this.FrameID -= 3;
            }
            if (animation == 1 && this.FrameID >= 3) {
                animation++; this.FrameID -= 3;
            }
        }
        else if (String.Contains(sceneName, "SSZ1")) {
            this.Sprite = Resources.LoadSprite("Sprites/SSZ1/Platform.bin", SCOPE_SCENE);
            if (animation == 0 && this.FrameID >= 1) {
                animation++; this.FrameID -= 1;
            }
        }
        else if (String.Contains(sceneName, "SSZ2")) {
            this.Sprite = Resources.LoadSprite("Sprites/SSZ2/Platform.bin", SCOPE_SCENE);
            if (animation == 0 && this.FrameID >= 1) {
                animation++; this.FrameID -= 1;
            }
        }
        else if (String.Contains(sceneName, "OOZ1") || String.Contains(sceneName, "OOZ2")) {
            this.Sprite = Resources.LoadSprite("Sprites/OOZ/Platform.bin", SCOPE_SCENE);
        }
        else if (String.Contains(sceneName, "MSZ")) {
            this.Sprite = Resources.LoadSprite("Sprites/MSZ/Platform.bin", SCOPE_SCENE);

            if (animation == 0 && this.FrameID >= 9) {
                animation++; this.FrameID -= 9;
            }
        }
        else if (String.Contains(sceneName, "HCZ")) {
            this.Sprite = Resources.LoadSprite("Sprites/HCZ/Platform.bin", SCOPE_SCENE);

            if (animation == 0 && this.FrameID >= 7) {
                animation++; this.FrameID -= 7;
            }
            if (animation == 1 && this.FrameID >= 6) {
                animation++; this.FrameID -= 6;
            }
        }
        else if (String.Contains(sceneName, "LRZ1"))
            this.Sprite = Resources.LoadSprite("Sprites/LRZ1/Platform.bin", SCOPE_SCENE);
        else if (String.Contains(sceneName, "LRZ2"))
            this.Sprite = Resources.LoadSprite("Sprites/LRZ2/Platform.bin", SCOPE_SCENE);
        else if (String.Contains(sceneName, "LRZ3"))
            this.Sprite = Resources.LoadSprite("Sprites/LRZ2/Platform.bin", SCOPE_SCENE);
        else if (String.Contains(sceneName, "TMZ1"))
            this.Sprite = Resources.LoadSprite("Sprites/TMZ1/Platform.bin", SCOPE_SCENE);
        else if (String.Contains(sceneName, "TMZ2"))
            this.Sprite = Resources.LoadSprite("Sprites/TMZ1/Platform.bin", SCOPE_SCENE);
        else
            this.Sprite = Resources.LoadSprite("Sprites/AIZ/Platform.bin", SCOPE_SCENE);

        // print "(" + this.X + ", " + this.Y + ")";

        this.CosVal = Math.Cos(this.Angle);
        this.SinVal = Math.Sin(this.Angle);

        if (true)
            this.Priority = DrawGroup_FGLow_Low;

        // Choose status
        switch (this.Type) {
            // Stationary
            case 0:
                this.OnScreenHitboxW = 128.0;
                this.OnScreenHitboxH = 128.0;
                this.Status = this.Platform_Status_Stationary;
                break;
            // Timed Fall
            case 1:
                this.OnScreenHitboxW = 128.0;
                this.OnScreenHitboxH = (Math.Abs(this.AmplitudeY) + 128.0) * 2.0;
                this.Status = this.Platform_Status_TimedFalling;
                break;
            // Oscillating Movement
            case 2:
                this.OnScreenHitboxW = Math.Abs(this.AmplitudeX) * 2.0 + 128.0;
                this.OnScreenHitboxH = Math.Abs(this.AmplitudeY) * 2.0 + 128.0;
                this.Status = this.Platform_Status_Moving;
                this.Rotation = this.Angle;
                this.Angle = 0;
                break;
            // Circular Movement
            case 3:
                this.OnScreenHitboxW = Math.Abs(this.AmplitudeX) * 2.0 + 128.0;
                this.OnScreenHitboxH = Math.Abs(this.AmplitudeY) * 2.0 + 128.0;
                this.Status = this.Platform_Status_MovingCircular;
                break;
            case 12:
                this.PossibleTimerUntilDrop = 88;
            // Swinging Movement
            case 4:
                this.OnScreenHitboxW = this.OnScreenHitboxH = (Math.Abs(this.AmplitudeY) * 16.0 + 128.0) * 2.0;
                animation = 1; this.FrameID = 0;
                this.AmplitudeY *= 16.0;
                this.SwingAngle = 4 * this.Angle;
                this.Angle = this.SwingAngle + 0x100 + Number.AsInteger(this.AmplitudeX * Static.HexSinHighPrec(this.Speed * this.PossibleTimerUntilDrop) * 4.0);
                this.FinalX = this.AmplitudeY * Static.HexCosHighPrec(this.Angle) + this.StartX;
                this.FinalY = this.AmplitudeY * Static.HexSinHighPrec(this.Angle) + this.StartY;
                this.Status = this.Platform_Status_Swinging;
                break;
            // PlatformController Controlled
            case 5:
                this.OnScreenHitboxW = 128.0;
                this.OnScreenHitboxH = 128.0;
                this.Status = this.Platform_Status_PlatformControlledMovement;
                break;
            // Pushable
            case 6:
                this.Speed /= 32.0;
                this.OnScreenHitboxW = 128.0;
                this.OnScreenHitboxH = 128.0;
                this.Status = this.Platform_Status_Pushable;
                break;
            // Back/Forth Hitting Walls
            case 7:
                this.OnScreenHitboxW = 128.0;
                this.OnScreenHitboxH = 128.0;
                break;
            // Rise on stand atop
            case 8:
                this.OnScreenHitboxW = 128.0;
                this.OnScreenHitboxH = 128.0;
                break;
            // FBZ Platform that lowers
            case 9:
                this.OnScreenHitboxW = this.OnScreenHitboxH = 128.0 + Math.Abs(this.AmplitudeX);
                this.Status = this.Platform_Status_LowerAfterStand;
                break;
            // Platform move from hiding in wall
            case 10:
                this.OnScreenHitboxW = 128.0;
                this.OnScreenHitboxH = 128.0;
                break;
            case 11:
                this.OnScreenHitboxW = 128.0;
                this.OnScreenHitboxH = 128.0;
                this.Status = this.Platform_StatusNodeBasedMovement;
                break;
            // Clackers
            case 14:
                this.OnScreenHitboxW = 128.0;
                this.OnScreenHitboxH = 128.0;
                break;
            // Lower while player is atop (LRZ1 hidden springs)
            case 16:
                this.OnScreenHitboxW = 128.0;
                this.OnScreenHitboxH = 128.0;
                break;
            default:
                print "Unimplemented platform type: " + this.Type + " (" + Number.AsInteger(this.X) + ", " + Number.AsInteger(this.Y) + ")";
                break;
        }

        // Choose collision status
        var collisionHitbox = 0;
        switch (this.Collision) {
            case 0:
                collisionHitbox = 0;
                this.CollisionStatus = this.Platform_CollisionStatus_TopSolid;
                break;
            case 1:
                collisionHitbox = 1;
                this.CollisionStatus = this.Platform_CollisionStatus_Solid;
                break;
            case 3:
                this.CollisionStatus = this.Platform_CollisionStatus_HarmfulSpike;
                break;
            case 4:
                this.CollisionStatus = null;
                break;
            case 5:
                // this.CollisionStatus = this.Platform_CollisionStatus_SidesHurt;
                break;
            case 6:
                this.CollisionStatus = this.Platform_CollisionStatus_BottomHurt;
                break;
            case 7:
                // this.CollisionStatus = this.Platform_CollisionStatus_TopHurt;
                break;
            // Rotating player
            case 8:
                collisionHitbox = 1;
                this.CollisionStatus = this.Platform_CollisionStatus_Solid;
                break;
            case 15:
                // this.CollisionStatus = this.Platform_CollisionStatus_FBZCircleThing;
                break;
            default:
                print "Unimplemented platform collision type: " + this.Collision + " (" + Number.AsInteger(this.X) + ", " + Number.AsInteger(this.Y) + ")";
                this.CollisionStatus = this.Platform_CollisionStatus_Solid;
                break;
        }

        // Set hitbox
        if (this.FrameID >= 0) {
            this.GetHitboxFromSprite(this.Sprite, animation, this.FrameID, collisionHitbox);
            this.SetAnimation(animation, this.FrameID);
        }
        else {
            this.Visible = false;
        }
        this.HitboxHalfW = this.HitboxW / 2.0;
        this.HitboxHalfH = this.HitboxH / 2.0;
        this.FlipFlag = 0;

        this.SoundLooping = false;
        this.OnScreenHitboxHalfW = this.OnScreenHitboxW * 0.5;
        this.OnScreenHitboxHalfH = this.OnScreenHitboxH * 0.5;



        this.Child = Array.Create(this.ChildCount);

        var childIndex = 0;
        var distance = (this.HitboxW + 16.0) * (this.HitboxW + 16.0) + (this.HitboxH + 16.0) * (this.HitboxH + 16.0);

        with ("Spring") {
            if (childIndex >= other.ChildCount)
                continue;

            var disObj = Math.Distance(this.X, this.Y, other.X, other.Y);
            if (disObj * disObj < distance) {
                other.Child[childIndex] = this;

                this.PlatformChildType = "Spring";
                childIndex++;
            }
        }
        with ("ItemBox") {
            if (childIndex >= other.ChildCount)
                continue;

            var disObj = Math.Distance(this.X, this.Y, other.X, other.Y);
            if (disObj * disObj < distance) {
                other.Child[childIndex] = this;
                childIndex++;

                this.PlatformChildType = "ItemBox";
            }
        }
    }
    event Update() {
        // if (!this.InView(0,
        //     this.StartX - this.OnScreenHitboxHalfW,
        //     this.StartY - this.OnScreenHitboxHalfH,
        //     this.OnScreenHitboxW, this.OnScreenHitboxH))
        //     return;
        this.X = Math.Floor(this.FinalX);
        this.Y = Math.Floor(this.FinalY);
        if (this.HasTension) {
            var tension = this.TensionValue;
            if (this.PlayerAtop) {
                if (tension < 0x40)
                    this.TensionValue = tension + 4;
            }
            else {
                if (tension > 0x00)
                    this.TensionValue = tension - 4;
            }
        }

        this.DeltaX = -this.X;
        this.DeltaY = -this.Y;

        if (this.Status)
            this.Status();

        if (true) {
            this.PlayerAtop = false;
            this.DeltaX += Math.Floor(this.FinalX);
            this.DeltaY += Math.Floor(this.FinalY);

            // TODO: complete this
            // if (this.Status != sub_XXX && this.Status != sub_XXX) {
                if (this.CollisionStatus)
                    this.CollisionStatus();
            // }

            this.X = this.StartX;
            this.Y = this.StartY;
            for (var c = 0; c < this.ChildCount; c++) {
                var child = this.Child[c];
                if (child) {
                    if (child.PlatformChildType == "ItemBox") {
                        if (child.PlatformOffsetY == 0.0) {
                            child.Platform = this;
                            child.PlatformOffsetX = child.X - this.StartX;
                            child.PlatformOffsetY = child.Y - this.StartY;
                            this.X = child.PlatformOffsetX + this.FinalX;
                            this.Y = child.PlatformOffsetY + this.FinalY;
                            this.Platform = other;
                        }
                    }
                    else {
                        child.X += this.DeltaX;
                        child.Y += this.DeltaY;
                    }
                }
            }
        }
    }

    // Type 0
    event Platform_Status_Stationary() {
        this.FinalX = this.StartX;
        this.FinalY = this.StartY;
        this.FinalY += Static.HexSin(this.TensionValue) * 4;
        this.XSpeed = 0.0;
        this.YSpeed = 0.0;
    }
    // Type 1
    event Platform_Status_TimedFalling() {
        var time = this.PossibleTimerUntilDrop;
        if (time) {
            this.PossibleTimerUntilDrop = time - 1;
            if (time == 1) {
                this.OnScreenHitboxH = 0.0;
                // this.Priority = 2; // ???
                this.Status = this.Platform_Status_TimedFalling_OnFall;
                this.PossibleTimerUntilDrop = 30;
            }
        }
        this.FinalX = this.StartX;
        this.FinalY = this.StartY;
        this.FinalY += Static.HexSin(this.TensionValue) * 4;
        this.XSpeed = 0.0;
    }
    // Type 2
    event Platform_Status_Moving() {
        var angle = Number.AsInteger(this.Speed * (this.Rotation + Scene_Frame));

        var negOffsetX = -this.FinalX;
        var negOffsetY = -this.FinalY;
        this.FinalX = this.AmplitudeX * Static.HexSinHighPrec(angle) + this.StartX;
        this.FinalY = this.AmplitudeY * Static.HexSinHighPrec(angle) + this.StartY;
        this.FinalY += Static.HexSin(this.TensionValue) * 4;
        this.XSpeed = this.FinalX + negOffsetX;
        this.YSpeed = this.FinalY + negOffsetY;
    }
    // Type 3
    event Platform_Status_MovingCircular() {
        var angle = Number.AsInteger(this.Speed * Scene_Frame + this.Angle * 4);

        var negOffsetX = -this.FinalX;
        var negOffsetY = -this.FinalY;
        this.FinalX = this.AmplitudeX * Static.HexCosHighPrec(angle) + this.StartX;
        this.FinalY = this.AmplitudeY * Static.HexSinHighPrec(angle) + this.StartY;
        this.FinalY += Static.HexSin(this.TensionValue) * 4;
        this.XSpeed = this.FinalX + negOffsetX;
        this.YSpeed = this.FinalY + negOffsetY;
    }
    // Type 4
    event Platform_Status_Swinging() {
        var negOffsetX = -this.FinalX;
        var negOffsetY = -this.FinalY;

        this.Angle = this.SwingAngle + 0x100 + Number.AsInteger(this.AmplitudeX * Static.HexSinHighPrec(this.Speed * Scene_Frame) * 4.0);
        this.FinalX = this.AmplitudeY * Static.HexCosHighPrec(this.Angle) + this.StartX;
        this.FinalY = this.AmplitudeY * Static.HexSinHighPrec(this.Angle) + this.StartY;

        this.XSpeed = this.FinalX + negOffsetX;
        this.YSpeed = this.FinalY + negOffsetY;
    }
    // Type 5
    event Platform_Status_PlatformControlledMovement() {
        this.XSpeed = this.YSpeed = 0.0;
    }
    // Type 6
    event Platform_Status_Pushable() {
        this.XSpeed = this.YSpeed = 0.0;

        var player, platform, playerIndex, playerFlag;

        platform = this;

        playerIndex = -1;
        with ("Player") {
            playerIndex++;
            if (!this.Active)
                continue;

            playerFlag = 1 << playerIndex;
            if (playerFlag & platform.PlayerOnLeftFlag)
                platform.XSpeed += platform.Speed;
            if (playerFlag & platform.PlayerOnRightFlag)
                platform.XSpeed -= platform.Speed;
        }

        if (this.XSpeed != 0.0) {
            if (!this.SoundLooping) {
                Sound.Loop(this.SFX_Push);
                this.SoundLooping = true;
            }

            var timeToDrop = this.PossibleTimerUntilDrop;
            if (timeToDrop > 0) {
                this.XSpeed = 0.0;
                this.PossibleTimerUntilDrop = timeToDrop - 1;
            }
        }
        else {
            if (this.SoundLooping) {
                Sound.Stop(this.SFX_Push);
                this.SoundLooping = false;
            }
            if (this.PossibleTimerUntilDrop < 4)
                this.PossibleTimerUntilDrop++;
        }

        this.FinalX += this.XSpeed;
        this.X = this.FinalX;
        this.Y = this.FinalY;

        playerIndex = -1;
        with ("Player") {
            playerIndex++;
            if (!this.Active)
                continue;

            playerFlag = 1 << playerIndex;
            if (playerFlag & platform.PlayerOnLeftFlag)
                this.X = platform.FinalX + (-platform.HitboxHalfW - this.HitboxW / 2.0);
            if (playerFlag & platform.PlayerOnRightFlag)
                this.X = platform.FinalX + (platform.HitboxHalfW - (-this.HitboxW / 2.0) - 1.0);
        }

        // TODO: the rest here

        //
        this.FinalX = this.X;
        this.FinalY = this.Y;
    }
    // Type 9
    event Platform_Status_LowerAfterStand() {
        this.Rotation += 4;
        var oscillate = Static.HexSinHighPrec(this.Rotation) * 8.0;

        this.FinalY = this.StartY + oscillate;

        if (this.PlayerAtop) {
            if (this.HasTension)
                this.PossibleTimerUntilDrop = 120;

            this.TileOriginX = this.FinalX - this.StartX;
            this.StartX = this.FinalX;

            this.TileOriginY = oscillate;
            this.StartY = this.FinalY;

            this.Status = this.Platform_Status_LowerAfterStand_OnStand;
        }

        this.XSpeed = this.YSpeed = 0.0;
    }
    // Type 11
    event Platform_StatusNodeBasedMovement() {

    }

    // Post-statuses
    event Platform_Status_TimedFalling_OnFall() {
        this.PossibleTimerUntilDrop--;
        if (this.PossibleTimerUntilDrop <= 0) {
            this.PossibleTimerUntilDrop = 0;

            // this.Status = null;

            var player, platform, playerIndex, playerFlag;

            platform = this;

            playerIndex = -1;
            with ("Player") {
                playerIndex++;
                if (!this.Active)
                    continue;

                playerFlag = 1 << playerIndex;
                if (playerFlag & platform.PlayerOnTopFlag)
                    this.YSpeed = platform.YSpeed - 1.0;
            }
        }

        this.FinalY += this.YSpeed;
        this.YSpeed += 0.21875;
        this.XSpeed = 0;
    }
    event Platform_Status_LowerAfterStand_OnStand() {
        this.FinalY += 1.0;
        this.YSpeed = 1.0;

        this.Y = this.FinalY;
    }

    // Collision 0
    event Platform_CollisionStatus_TopSolid() {
        var onTopFlag = this.PlayerOnTopFlag;

        this.PlayerOnTopFlag = 0;

        var player, platform = this, playerIndex = -1;
        with ("Player") {
            playerIndex++;
            player = this;

            var originalYSpeed = player.YSpeed;
            if (platform.DeltaY < 0.0)
                player.YSpeed = originalYSpeed - platform.DeltaY;

            if (Static.Entity_TopSolidCollideWithPlayer(platform, player)) {
                platform.PlayerAtop = true;
                // TODO: complete this
                if (!((1 << playerIndex) & onTopFlag) && !player.CannotLoseRings && platform.Status == platform.Platform_Status_TimedFalling && platform.PossibleTimerUntilDrop == 0) {
                    if (player.Status == player.Player_StatusMighty_HammerDrop)
                        platform.PossibleTimerUntilDrop = 1;
                    else
                        platform.PossibleTimerUntilDrop = 30;
                }

                platform.PlayerOnTopFlag |= 1 << playerIndex;

                player.X += platform.DeltaX;
                player.Y += platform.DeltaY;
                player.Y =  Math.Floor(player.Y);
                player.Ground = true;
            }
            else {
                player.YSpeed = originalYSpeed;
            }
        }
    }
    // Collision 1
    event Platform_CollisionStatus_Solid() {
        var onTopFlag = this.PlayerOnTopFlag;

        this.PlayerOnTopFlag = 0;
        this.PlayerOnLeftFlag = 0;
        this.PlayerOnRightFlag = 0;

        var player, platform = this, playerIndex = -1;
        with ("Player") {
            playerIndex++;
            if (!this.Active)
                continue;

            player = this;

            var platformHitboxH = platform.HitboxH;
            var platformY = platform.Y;

            platform.HitboxH = 8.0;
            platform.Y -= platformHitboxH / 2.0 - 4.0;

            Static.Entity_TopSolidCollideWithPlayer(platform, player);

            platform.HitboxH = platformHitboxH;
            platform.Y = platformY;

            var val = Static.Entity_SolidCollideWithPlayer(platform, player);
            switch (val) {
                // Top
                case 1:
                    platform.PlayerAtop = true;
                    // TODO: complete this
                    if (!((1 << playerIndex) & onTopFlag) && platform.PossibleTimerUntilDrop == 0) {
                        if (player.Status == player.Player_StatusMighty_HammerDrop)
                            platform.PossibleTimerUntilDrop = 1;
                        else
                            platform.PossibleTimerUntilDrop = 30;
                    }

                    platform.PlayerOnTopFlag |= 1 << playerIndex;

                    player.X += platform.DeltaX;
                    player.Y += platform.DeltaY;
                    player.Y =  Math.Floor(player.Y);
                    if (platform.YSpeed <= 0.0)
                        player.VerticalCollisionFlag |= 1;
                    break;
                // Left
                case 2:
                    if (player.Ground && player.InputRight) {
                        platform.PlayerOnLeftFlag |= 1 << playerIndex;
                    }

                    if (platform.XSpeed <= 0.0) {
                        if (player.InputLeft) {
                            player.GroundSpeed = platform.XSpeed;
                            player.XSpeed = player.GroundSpeed - player.Acceleration;
                        }
                        player.HorizontalCollisionFlag |= 1;
                    }
                    break;
                // Right
                case 3:
                    if (player.Ground && player.InputLeft) {
                        platform.PlayerOnRightFlag |= 1 << playerIndex;
                    }

                    if (platform.XSpeed >= 0.0) {
                        if (player.InputRight) {
                            player.GroundSpeed = platform.XSpeed;
                            player.XSpeed = player.GroundSpeed + player.Acceleration;
                        }
                        player.HorizontalCollisionFlag |= 2;
                    }
                    break;
                // Bottom
                case 4:
                    if (platform.YSpeed >= 0.0)
                        player.VerticalCollisionFlag |= 2;
                    break;
            }
        }
    }
    // Collision 3
    event Platform_CollisionStatus_HarmfulSpike() {
        var player, platform = this;
        with ("Player") {
            player = this;
            if (player.IsGhost)
                continue;

            player.UpdateHitbox(0);

            if (Static.Entity_CollideWithObject(platform, player)) {
                if (!player.Player_DoMightyUnspin(4.0, false, platform, player.Unk_0x234))
                    player.GetHurt(platform.X); // AttemptHurt
            }
        }
    }
    // Collision 6
    event Platform_CollisionStatus_BottomHurt() {
        var onTopFlag = this.PlayerOnTopFlag;

        this.PlayerOnTopFlag = 0;
        this.PlayerOnLeftFlag = 0;
        this.PlayerOnRightFlag = 0;

        var player, platform = this, playerIndex = -1;
        with ("Player") {
            playerIndex++;
            if (!this.Active)
                continue;

            player = this;

            var platformHitboxH = platform.HitboxH;
            var platformY = platform.Y;

            platform.HitboxH = 8.0;
            platform.Y -= platformHitboxH / 2.0 - 4.0;

            Static.Entity_TopSolidCollideWithPlayer(platform, player);

            platform.HitboxH = platformHitboxH;
            platform.Y = platformY;

            var val = Static.Entity_SolidCollideWithPlayer(platform, player);
            switch (val) {
                // Top
                case 1:
                    platform.PlayerAtop = true;
                    // TODO: complete this
                    if (!((1 << playerIndex) & onTopFlag) && platform.PossibleTimerUntilDrop == 0) {
                        if (player.Status == player.Player_StatusMighty_HammerDrop)
                            platform.PossibleTimerUntilDrop = 1;
                        else
                            platform.PossibleTimerUntilDrop = 30;
                    }

                    platform.PlayerOnTopFlag |= 1 << playerIndex;

                    player.X += platform.DeltaX;
                    player.Y += platform.DeltaY;
                    player.Y =  Math.Floor(player.Y);
                    if (platform.YSpeed <= 0.0)
                        player.VerticalCollisionFlag |= 1;
                    break;
                // Left
                case 2:
                    if (player.Ground && player.InputRight) {
                        platform.PlayerOnLeftFlag |= 1 << playerIndex;
                    }

                    if (platform.XSpeed <= 0.0) {
                        if (player.InputLeft) {
                            player.GroundSpeed = platform.XSpeed;
                            player.XSpeed = player.GroundSpeed - player.Acceleration;
                        }
                        player.HorizontalCollisionFlag |= 1;
                    }
                    break;
                // Right
                case 3:
                    if (player.Ground && player.InputLeft) {
                        platform.PlayerOnRightFlag |= 1 << playerIndex;
                    }

                    if (platform.XSpeed >= 0.0) {
                        if (player.InputRight) {
                            player.GroundSpeed = platform.XSpeed;
                            player.XSpeed = player.GroundSpeed + player.Acceleration;
                        }
                        player.HorizontalCollisionFlag |= 2;
                    }
                    break;
                // Bottom
                case 4:
                    if (platform.YSpeed >= 0.0)
                        player.VerticalCollisionFlag |= 2;
                    if (!player.Player_DoMightyUnspin(4.0, false, platform, player.Unk_0x234))
                        player.GetHurt(platform.X);
                    break;
            }
        }
    }

    event Render() {
        if (!this.Visible)
            return;
        if (!this.OnScreen)
            return;

        if (this.Status == this.Platform_Status_Swinging) {
            var angle = this.Angle;
            var cos = Static.HexCosHighPrec(angle) * 16.0;
            var sin = Static.HexSinHighPrec(angle) * 16.0;
            var x = Math.Floor(this.StartX);
            var y = Math.Floor(this.StartY);

            Draw.Sprite(this.Sprite, this.CurrentAnimation, 2, x, y, false, false);
            x += cos;
            y += sin;

            for (var i = 16.0; i < this.AmplitudeY; i += 16.0) {
                Draw.Sprite(this.Sprite, this.CurrentAnimation, 1, x, y, false, false);
                x += cos;
                y += sin;
            }
        }

        Draw.Sprite(this.Sprite, this.CurrentAnimation, this.CurrentFrame, Math.Floor(this.FinalX), Math.Floor(this.FinalY), false, false);
    }
}
