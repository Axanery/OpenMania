class PlaneSwitch {
    event Create() {
        if (this.PropertyExists("filter") && !(this.PropertyGet("filter") & Mode_MANIA)) {
            this.Active = false;
            return;
        }

        this.Priority = DrawGroup_FGHigh_High;

        this.Angle = 0;
        this.OnPath = false;
        this.Flags = 0;
        this.InLayer = 0;
        this.InLayerVisual = 0;
        this.OutLayer = 0;
        this.OutLayerVisual = 0;
        this.Size = 0;

        if (this.PropertyExists("angle"))
            this.Angle = this.PropertyGet("angle");
        if (this.PropertyExists("onPath"))
            this.OnPath = this.PropertyGet("onPath");
        if (this.PropertyExists("size"))
            this.Size = 16.0 * this.PropertyGet("size");
        if (this.PropertyExists("flags")) {
            var flags = this.PropertyGet("flags");
            this.InLayerVisual = !!(flags & 1);
            this.InLayer = !!(flags & 2);
            this.OutLayerVisual = !!(flags & 4);
            this.OutLayer = !!(flags & 8);
            this.Flags = flags;
        }

        this.PlaneSprite = Resources.LoadSprite("Sprites/Global/PlaneSwitch.bin", SCOPE_SCENE);

        if (this.InLayerVisual)
            this.InLayerVisual = DrawGroup_AboveTiles;
        else
            this.InLayerVisual = DrawGroup_FGLow_High;

        if (this.OutLayerVisual)
            this.OutLayerVisual = DrawGroup_AboveTiles;
        else
            this.OutLayerVisual = DrawGroup_FGLow_High;

        // Set hitbox
        if (this.Angle == 0) {
            this.HitboxW = 32.0;
            this.HitboxH = this.Size;
        }
        else {
            var anX;
            var anY;
            var minX = 0.0;
            var maxX = 0.0;
            var minY = 0.0;
            var maxY = 0.0;
            var sizeMult = this.Size / -8.0;
            var sinVal = Static.HexSin(this.Angle) * 16.0;
            var cosVal = Static.HexCos(this.Angle) * 16.0;
            anX = sizeMult * sinVal - cosVal;
            anY = sizeMult * cosVal + sinVal;
            minX = Math.Min(minX, anX); minY = Math.Min(minY, anY);
            maxX = Math.Max(maxX, anX); maxY = Math.Max(maxY, anY);
            minX = Math.Min(minX, -anX); minY = Math.Min(minY, -anY);
            maxX = Math.Max(maxX, -anX); maxY = Math.Max(maxY, -anY);
            anX = sizeMult * sinVal + cosVal;
            anY = sizeMult * cosVal - sinVal;
            minX = Math.Min(minX, anX); minY = Math.Min(minY, anY);
            maxX = Math.Max(maxX, anX); maxY = Math.Max(maxY, anY);
            minX = Math.Min(minX, -anX); minY = Math.Min(minY, -anY);
            maxX = Math.Max(maxX, -anX); maxY = Math.Max(maxY, -anY);

            this.HitboxW = maxX - minX;
            this.HitboxH = maxY - minY;
        }

        this.HitboxHalfW = this.HitboxW / 2.0;
        this.HitboxHalfH = this.HitboxH / 2.0;

        this.OnScreenHitboxW = this.HitboxW;
        this.OnScreenHitboxH = this.HitboxH;

        this.CosVal = Static.HexCos(this.Angle);
        this.SinVal = Static.HexSin(this.Angle);
        this.RCosVal = Static.HexCos(-this.Angle + 0x100);
        this.RSinVal = Static.HexSin(-this.Angle + 0x100);

        this.Visible = false;
    }
    event Update() {
        // PlaneSwitch detection
        with ("Player") {
            if (other.OnPath && !this.Ground)
                continue;

            var relX = this.X - other.X;
            var relY = this.Y - other.Y;

            if (Math.Abs(relX) > other.HitboxHalfW)
                continue;
            if (Math.Abs(relY) > other.HitboxHalfH)
                continue;

            var cos = other.RCosVal;
            var sin = other.RSinVal;

            var projectedX = relY * sin + relX * cos;
            var projectedY = relY * cos - relX * sin;
            var projectedSpeed = this.YSpeed * sin + this.XSpeed * cos;

            if (Math.Abs(projectedX) >= 24.0)
                continue;
            if (Math.Abs(projectedY) >= other.Size / 2.0)
                continue;

            if (projectedX + projectedSpeed >= 0.0) {
                if (this.PlaneIndex != other.OutLayer)
                    // print "PlaneSwitch: " + this.PlaneIndex + " -> " + other.OutLayer + "    (" + projectedX + ", " + projectedY + ")";

                this.PlaneIndex = other.OutLayer;
                this.Priority = other.OutLayerVisual;
            }
            else {
                if (this.PlaneIndex != other.InLayer)
                    // print "PlaneSwitch: " + this.PlaneIndex + " -> " + other.InLayer + "    (" + projectedX + ", " + projectedY + ")";

                this.PlaneIndex = other.InLayer;
                this.Priority = other.InLayerVisual;
            }
        }
    }
    event Render() {
        if (!this.Visible)
            return;
        if (!this.OnScreen)
            return;

        var cos = this.CosVal;
        var sin = this.SinVal;
        var cos16 = cos * 16.0;
        var sin16 = sin * 16.0;

        var sx = Math.Floor(this.X), sy = Math.Floor(this.Y);
        var x, y, frame, tempX, tempY;

        // Path In
        x = sx - 8.0;
        y = sy - this.Size / 2.0;
        frame = (this.Flags & 3);

        tempX = y * sin + x * cos;
        tempY = y * cos - x * sin;
        x = tempX; y = tempY;

        for (var i = 0.0; i < this.Size; i += 16.0) {
            Draw.Sprite(this.PlaneSprite, 0, frame, x, y, false, false);
            x += sin16;
            y += cos16;
        }

        // Path Out
        x = sx + 8.0;
        y = sy - this.Size / 2.0;
        frame = ((this.Flags >> 2) & 3);

        tempX = y * sin + x * cos;
        tempY = y * cos - x * sin;
        x = tempX; y = tempY;

        for (var i = 0.0; i < this.Size; i += 16.0) {
            Draw.Sprite(this.PlaneSprite, 0, frame, x, y, false, false);
            x += sin16;
            y += cos16;
        }

        // if (this.projectedX != 0.0) {
            // Draw.Rotate(0.0, 0.0, this.Angle * -Math_PI / 128.0);
            // Draw.SetBlendColor(1.0, 0.0, 0.0, 1.0);
            // Draw.Rectangle(this.projectedX, this.projectedY, 64.0, 1.0);
            // Draw.Rectangle(this.projectedX, this.projectedY - 32.0, 1.0, 64.0);
        // }
    }
}
