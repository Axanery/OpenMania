class BreakableWall {
    event Create() {
        if (this.PropertyExists("filter") && !(this.PropertyGet("filter") & Mode_MANIA)) {
            this.Active = false;
            return;
        }

        // Pre
        this.Priority = DrawGroup_FGHigh_High;

        // Load
        this.Sprite = Resources.LoadSprite("Sprites/Global/TicMark.bin", SCOPE_GAME);
        this.SFX_LedgeBreak = Resources.LoadSound("SoundFX/Stage/LedgeBreak.wav", SCOPE_GAME);
        this.AutoPhysics = false;
        this.Status = null;

        // Setup
        this.Type = 0;
        this.OnlyKnux = false;
        this.OnlyMighty = false;
        this.PriorityIndex = 0;
        this.SizeX = 0.0;
        this.SizeY = 0.0;
        if (this.PropertyExists("type"))
            this.Type = this.PropertyGet("type");
        if (this.PropertyExists("onlyKnux"))
            this.OnlyKnux = this.PropertyGet("onlyKnux");
        if (this.PropertyExists("onlyMighty"))
            this.OnlyMighty = this.PropertyGet("onlyMighty");
        if (this.PropertyExists("priority"))
            this.PriorityIndex = this.PropertyGet("priority");
        if (this.PropertyExists("size")) {
            var size = this.PropertyGet("size");
            this.SizeX = size[0];
            this.SizeY = size[1];
        }

        // Create
        this.OnScreenHitboxW = 256.0;
        this.OnScreenHitboxH = 256.0;
        var sizeX = this.SizeX;
        switch (this.Type) {
            case 0:
                this.Status = this.BreakableWall_StatusHorizontallyBreakable;
                if (sizeX == 0.0) {
                    this.SizeX = 2.0;
                    this.SizeY = 4.0;
                }
                break;
            case 1:
                this.Status = this.BreakableWall_StatusTubeTopBreakable;
                if (sizeX == 0.0) {
                    this.SizeX = 2.0;
                    this.SizeY = 2.0;
                }
                break;
            case 2:
            case 3:
                this.Status = this.BreakableWall_StatusTopBreakable;
                if (sizeX == 0.0) {
                    this.SizeX = 2.0;
                }
                break;
            case 4:
                this.Status = this.BreakableWall_StatusBottomBreakable;
                if (sizeX == 0.0) {
                    this.SizeX = 2.0;
                }
                break;
            case 5:
                // this.Status = this.BreakableWall_StatusBottomBreakable;
                if (sizeX == 0.0) {
                    this.SizeX = 2.0;
                    this.SizeY = 2.0;
                }
                break;
        }
        this.HitboxW = 16.0 * this.SizeX;
        this.HitboxH = 16.0 * this.SizeY;

        // Initial Status
        this.OnScreenHitboxHalfW = this.OnScreenHitboxW;
        this.OnScreenHitboxHalfH = this.OnScreenHitboxH;
    }

    event BreakableWall_StatusHorizontallyBreakable() {
        var player, wall;
        with ("Player") {
            if (!this.Active)
                continue;

            player = this;
            wall = other;

            var characterFlag = player.Character;
            var collideWithWall = false;
            if (wall.OnlyKnux && characterFlag != Character_KNUCKLES) {
                collideWithWall = true;
            }
            else if (wall.OnlyMighty && characterFlag != Character_MIGHTY) {
                collideWithWall = true;
            }
            var absGSP = Math.Abs(player.GroundSpeed);
            var canBreak = false;
            canBreak |= absGSP >= 4.5 && player.Ground && player.CurrentAnimation == 10;
            canBreak |= characterFlag == Character_KNUCKLES;
            canBreak |= characterFlag == Character_SONIC && player.SuperForm == 2;
            canBreak |= player.Status == player.Player_StatusFrozen_PGZ;
            if (player.Shield == ShieldType_FIRE && player.ShieldObject.CurrentAnimation == 2)
                canBreak = true;

            if (!canBreak)
                collideWithWall = true;

            if (!collideWithWall) {
                if (canBreak && player.CannotLoseRings == 0) {
                    if (!player.IsGhost) {
                        if (Static.Entity_CollideWithObject(wall, player)) {
                            wall.BreakHorizontally(player.X > wall.X);
                            if (player.Character == Character_KNUCKLES) {
                                var anim = player.CurrentAnimation;
                                if (anim == 48) {
                                    player.RayGlideSpeedStore *= 0.75;
                                    player.XSpeed *= 0.75;
                                    if (Math.Abs(player.XSpeed) <= 3.0) {
                                        player.SetAnimation(49, 0);
                                        player.Status = player.Player_StatusKnuckles_Falling;
                                    }
                                }
                                else if (anim == 51) {
                                    player.RayGlideSpeedStore *= 0.75;
                                    player.XSpeed *= 0.75;
                                }
                            }
                            Sound.Play(wall.SFX_LedgeBreak);
                            wall.Active = false;
                        }
                    }
                }
            }
            else {
                Static.Entity_SolidCollideWithPlayer(wall, player);
            }
        }
    }
    event BreakableWall_StatusTubeTopBreakable() {
        var player, wall;
        with ("Player") {
            if (!this.Active)
                continue;

            player = this;
            wall = other;

            var characterFlag = player.Character;
            var collideWithWall = false;
            if (wall.OnlyKnux && characterFlag != Character_KNUCKLES) {
                collideWithWall = true;
            }
            else if (wall.OnlyMighty && characterFlag != Character_MIGHTY) {
                collideWithWall = true;
            }
            // var absGSP = Math.Abs(player.GroundSpeed);
            var canBreak = true;
            // canBreak |= absGSP >= 4.5 && player.Ground && player.CurrentAnimation == 10;
            // canBreak |= characterFlag == Character_KNUCKLES;
            // canBreak |= characterFlag == Character_SONIC && player.SuperForm == 2;
            // canBreak |= player.Status == player.Player_StatusFrozen_PGZ;

            if (!canBreak)
                collideWithWall = true;

            if (!collideWithWall) {
                if (canBreak && player.CannotLoseRings == 0) {
                    if (!player.IsGhost) {
                        if (Static.Entity_CollideWithObject(wall, player)) {
                            wall.BreakVertically(player.Y > wall.Y);

                            player.Ground = false;
                            if (player.Status == player.Player_StatusMighty_HammerDrop)
                                player.YSpeed -= 1.0;
                            else
                                player.YSpeed = -3.0;
                            player.IncreaseEnemyCombo();

                            Sound.Play(wall.SFX_LedgeBreak);
                            wall.Active = false;
                        }
                    }
                }
            }
            else {
                Static.Entity_SolidCollideWithPlayer(wall, player);
            }
        }
    }
    event BreakableWall_StatusTopBreakable() {
        var player, wall;
        with ("Player") {
            if (!this.Active)
                continue;

            player = this;
            wall = other;

            var characterFlag = player.Character;
            var collideWithWall = false;
            if (wall.OnlyKnux && characterFlag != Character_KNUCKLES) {
                collideWithWall = true;
            }
            else if (wall.OnlyMighty && characterFlag != Character_MIGHTY) {
                collideWithWall = true;
            }
            // var absGSP = Math.Abs(player.GroundSpeed);
            var canBreak = true;
            // canBreak |= absGSP >= 4.5 && player.Ground && player.CurrentAnimation == 10;
            // canBreak |= characterFlag == Character_KNUCKLES;
            // canBreak |= characterFlag == Character_SONIC && player.SuperForm == 2;
            // canBreak |= player.Status == player.Player_StatusFrozen_PGZ;

            if (!canBreak)
                collideWithWall = true;

            if (!collideWithWall) {
                if (canBreak && player.CannotLoseRings == 0) {
                    if (!player.IsGhost) {
                        if (Static.Entity_CollideWithObject(wall, player)) {
                            wall.BreakVertically(player.Y > wall.Y);

                            player.Ground = false;
                            if (player.Status == player.Player_StatusMighty_HammerDrop)
                                player.YSpeed -= 1.0;
                            else
                                player.YSpeed = 0.0;
                            player.IncreaseEnemyCombo();

                            Sound.Play(wall.SFX_LedgeBreak);
                            wall.Active = false;
                        }
                    }
                }
            }
            else {
                Static.Entity_SolidCollideWithPlayer(wall, player);
            }
        }
    }
    event BreakableWall_StatusBottomBreakable() {
        var player, wall;
        with ("Player") {
            if (!this.Active)
                continue;

            player = this;
            wall = other;

            var characterFlag = player.Character;
            var collideWithWall = false;
            if (wall.OnlyKnux && characterFlag != Character_KNUCKLES) {
                collideWithWall = true;
            }
            else if (wall.OnlyMighty && characterFlag != Character_MIGHTY) {
                collideWithWall = true;
            }
            // var absGSP = Math.Abs(player.GroundSpeed);
            var canBreak = true;
            // canBreak |= absGSP >= 4.5 && player.Ground && player.CurrentAnimation == 10;
            // canBreak |= characterFlag == Character_KNUCKLES;
            // canBreak |= characterFlag == Character_SONIC && player.SuperForm == 2;
            // canBreak |= player.Status == player.Player_StatusFrozen_PGZ;

            if (!canBreak)
                collideWithWall = true;

            if (!collideWithWall) {
                if (canBreak && player.CannotLoseRings == 0) {
                    if (!player.IsGhost) {
                        if (Static.Entity_CollideWithObject(wall, player)) {
                            wall.BreakVertically(player.Y > wall.Y);
                            Sound.Play(wall.SFX_LedgeBreak);
                            wall.Active = false;
                        }
                    }
                }
            }
            else {
                Static.Entity_SolidCollideWithPlayer(wall, player);
            }
        }
    }

    event BreakHorizontally(toLeft) {
        var highLayer = Scene.GetLayerIndex("FG High");
        if (this.PriorityIndex == 1)
            highLayer = Scene.GetLayerIndex("FG Low");
        var tileStartX = (this.X - 8.0 * this.SizeX) / 16.0;
        var tileStartY = (this.Y - 8.0 * this.SizeY) / 16.0;
        var tileEndX = Number.AsInteger(tileStartX + this.SizeX);
        var tileEndY = Number.AsInteger(tileStartY + this.SizeY);
        tileStartX =   Number.AsInteger(tileStartX);
        tileStartY =   Number.AsInteger(tileStartY);

        var piece, angle;
        for (var x = tileStartX; x < tileEndX; x++) {
            for (var y = tileStartY; y < tileEndY; y++) {
                angle = Math.Atan(((x - tileStartX) * 16.0) + 8.0, (y * 16.0) + 8.0 - this.Y);
                piece = Instance.Create("BreakableWallPiece", (x * 16.0) + 8.0, (y * 16.0) + 8.0);
                piece.TileID = Scene.GetTileID(highLayer, x, y);
                piece.TileFlipX = Scene.GetTileFlipX(highLayer, x, y);
                piece.TileFlipY = Scene.GetTileFlipY(highLayer, x, y);
                piece.TileX = x;
                piece.TileY = y;
                piece.TileLayer = highLayer;
                piece.XSpeed = 3.5 * Math.Cos(angle);
                piece.YSpeed = 3.5 * Math.Sin(angle);
                if (toLeft)
                    piece.XSpeed = -piece.XSpeed;
                piece.Gravity = 0.21875;
                piece.Priority = this.Priority;
            }
        }
    }
    event BreakVertically(toLeft) {
        var highLayer = Scene.GetLayerIndex("FG High");
        if (this.PriorityIndex == 1)
            highLayer = Scene.GetLayerIndex("FG Low");
        var tileStartX = (this.X - 8.0 * this.SizeX) / 16.0;
        var tileStartY = (this.Y - 8.0 * this.SizeY) / 16.0;
        var tileEndX = Number.AsInteger(tileStartX + this.SizeX);
        var tileEndY = Number.AsInteger(tileStartY + this.SizeY);
        tileStartX =   Number.AsInteger(tileStartX);
        tileStartY =   Number.AsInteger(tileStartY);

        var piece, angle;
        for (var y = tileStartY; y < tileEndY; y++) {
            var tileY = ((y - tileStartY) * 16.0) + 8.0;
            var yStaggerDelay = 3 * Math.Abs(tileY - (this.Y - 8.0 * this.SizeY));

            for (var x = tileStartX; x < tileEndX; x++) {
                angle = Math.Atan(((x * 16.0) + 8.0 - this.X) * 2.0, tileY);
                piece = Instance.Create("BreakableWallPiece", (x * 16.0) + 8.0, (y * 16.0) + 8.0);
                piece.TileID = Scene.GetTileID(highLayer, x, y);
                piece.TileFlipX = Scene.GetTileFlipX(highLayer, x, y);
                piece.TileFlipY = Scene.GetTileFlipY(highLayer, x, y);
                piece.TileX = x;
                piece.TileY = y;
                piece.TileLayer = highLayer;
                piece.XSpeed = -5.5 * Math.Cos(angle);
                piece.YSpeed = 5.5 * Math.Sin(angle);
                piece.YSpeed = -Math.Abs(piece.YSpeed);
                if (toLeft)
                    piece.XSpeed = -piece.XSpeed;
                piece.Gravity = 0.21875;
                piece.Priority = this.Priority;
            }
        }
    }

    event Update() {
        this.SpriteOnScreen = false;
        if (!this.InView(0, this.X - this.OnScreenHitboxHalfW, this.Y - this.OnScreenHitboxHalfH, this.OnScreenHitboxW, this.OnScreenHitboxH))
            return;
        this.SpriteOnScreen = true;

        if (this.Status)
            this.Status();
    }
}
