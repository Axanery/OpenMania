class Launcher < Platform {
    Load() {
        super.Load();

        this.Sprite = Resources.LoadSprite("Sprites/FBZ/Platform.bin", SCOPE_GAME);
        this.SFX_Launch = Resources.LoadSound("SoundFX/Stage/Launch.wav", SCOPE_SCENE);
    }
    Setup() {
        super.Setup();

        this.LaunchTimer = 0;
        this.SpeedTimer = 0;

        if (this.PropertyExists("direction")) {
            this.FlipFlag = this.PropertyGet("direction");
        }
        if (this.PropertyExists("flipFlag")) {
            this.FlipFlag = this.PropertyGet("flipFlag");
        }
    }
    Create(flag) {
        if (this.PropertyExists("filter") && !(this.PropertyGet("filter") & Mode_MANIA)) {
            this.Active = false;
            return;
        }

        super.Create();

        this.ResetAnimation(1, 4);

        this.CollisionStatus = this.Launcher_CollisionStatus_Launcher;
        this.Status = this.Launcher_Status_Wait;

        this.RenderRegionW = this.UpdateRegionW;
        this.RenderRegionH = this.UpdateRegionH;
    }

    Launcher_Status_Wait() {

    }
    Launcher_Status_BuildSpeed() {
        var xsp = this.XSpeed;
        this.FinalX += xsp;

        this.SpeedTimer--;
        if (this.SpeedTimer >= 0)
            this.XSpeed *= 2.0;

        this.LaunchTimer--;
        if (this.LaunchTimer < 0) {
            var player, launcher = this, playerIndex = -1;
            with ("Player") {
                playerIndex++;
                player = this;

                if ((1 << playerIndex) & launcher.PlayerOnTopFlag) {
                    player.XSpeed =
                    player.GroundSpeed = launcher.XSpeed;
                }
            }

            this.Status = this.Launcher_Status_Launched;
        }
    }
    Launcher_Status_Launched() {
        if (this.FlipFlag)
            this.FinalX += 1.0;
        else
            this.FinalX -= 1.0;

        if (this.FinalX == this.StartX) {
            this.UpdateRegionW = this.RenderRegionW;
            this.UpdateRegionH = this.RenderRegionH;
            this.Status = this.Launcher_Status_Wait;
        }
    }
    Launcher_CollisionStatus_Launcher() {
        var onTopFlag = this.PlayerOnTopFlag;

        this.PlayerOnTopFlag = 0;

        this.GetHitboxFromSprite(this.Sprite, this.CurrentAnimation, this.CurrentFrame, 0);

        var player, launcher = this, playerIndex = -1;
        with ("Player") {
            playerIndex++;
            player = this;

            if (Static.Entity_TopSolidCollideWithPlayer(launcher, player)) {
                launcher.PlayerOnTopFlag |= 1 << playerIndex;

                if (launcher.Status == launcher.Launcher_Status_Wait) {
                    var xspeed = 1.0;
                    if (launcher.FlipFlag)
                        xspeed = -1.0;

                    launcher.UpdateRegionW = launcher.UpdateRegionH = 0.0;
                    launcher.XSpeed = xspeed;
                    launcher.LaunchTimer = 12;
                    launcher.SpeedTimer = 4;
                    launcher.Status = launcher.Launcher_Status_BuildSpeed;

                    Sound.Play(launcher.SFX_Launch);
                }

                if (launcher.Status == launcher.Launcher_Status_Launched) {
                    player.X += launcher.DeltaX;
                }
                else {
                    player.X = launcher.FinalX;
                    player.FlipFlag = player.Flip = launcher.FlipFlag;
                    player.XSpeed = 0.0;
                    player.GroundSpeed = launcher.XSpeed;
                    player.GroundSpeed = Math.Clamp(player.GroundSpeed, -6.0, 6.0);
                    player.PushingTimer = 0;
                    player.UseGroundSpeed = true;
                    if (player.Status != player.Player_StatusRoll)
                        player.Status  = player.Player_StatusStanding;
                }
            }
            else if (((1 << playerIndex) & onTopFlag) && launcher.Status != launcher.Launcher_Status_Launched) {
                player.XSpeed =
                player.GroundSpeed = launcher.XSpeed;
            }
        }
    }

    UpdateEarly() {
        super.UpdateEarly();
    }
    Update() {
        super.Update();

        this.Animate();
    }

    Render() {
        Draw.Sprite(this.Sprite, this.CurrentAnimation, this.CurrentFrame, Math.Floor(this.FinalX), Math.Floor(this.FinalY), this.FlipFlag & 1, this.FlipFlag & 2);
    }
}
