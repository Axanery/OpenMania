class Camera {
    event Create() {
        this.LastX = this.X;
        this.LastY = this.Y;
        this.PlayerInAir = false;
        this.SetOnJump = 0.0;
        this.Status = null;
        this.PlayerPtr = null;
        this.DestinationOffsetX = 0.0;
        this.DestinationOffsetY = 0.0;
        this.MinFollowDistanceX = 8.0;
        this.OffsetX = 0.0;
        this.OffsetY = 0.0;
        this.ShakeX = 0; // These need to be integers
        this.ShakeY = 0; // These need to be integers
        this.ClampedShakenX = this.X;
        this.ClampedShakenY = this.Y;

        this.CustomViewHeightHalf = 104.0; // 0x68

        this.LevelWidth = Scene.GetWidth() * 16.0;
        this.LevelHeight = Scene.GetHeight() * 16.0;

        this.Status = this.Camera_StatusNormal;

        this.BoundPanningSpeed = 2.0;

        this.MaxCameraXSpeed = 16.0;
        this.MaxCameraYSpeed = 24.0;

        this.MinX = 0.0;
        this.MinY = 0.0;
        this.MaxX = this.LevelWidth;
        this.MaxY = this.LevelHeight;
        this.ToMinX = 0.0;
        this.ToMinY = 0.0;
        this.ToMaxX = this.LevelWidth;
        this.ToMaxY = this.LevelHeight;

        this.Camera_Unk_0x9C = 0.0;
    }

    event UpdateLate() {
        this.LastX = this.X;
        this.LastY = this.Y;

        if (this.Status)
            this.Status();

        this.XSpeed = this.X - this.LastX;
        this.YSpeed = this.Y - this.LastY;

        this.MoveViewPosition();

        var shake = this.ShakeX;
        if (shake) {
            if (shake <= 0)
                this.ShakeX = -shake - 1;
            else
                this.ShakeX = -shake;
        }

        shake = this.ShakeY;
        if (shake) {
            if (shake <= 0)
                this.ShakeY = -shake - 1;
            else
                this.ShakeY = -shake;
        }

        if (!this.PlayerInAir) {
            var v4 = this.SetOnJump - this.SetOnJump / 8.0;
            if (v4 < 0.0)
                v4 = 0.0;
            this.SetOnJump = v4;
        }
    }

    event Camera_MoveBoundsY() {
        var minY, maxY;
        var yspeed = this.YSpeed;

        minY = this.MinY;
        if (this.ToMinY > minY) {
            var viewY = CameraY;
            if (viewY <= minY)
                viewY = minY + this.BoundPanningSpeed;
            this.MinY = viewY;
        }

        minY = this.MinY;
        if (this.ToMinY < minY) {
            if (CameraY <= minY) {
                this.MinY = minY - this.BoundPanningSpeed;
                if (yspeed < 0.0) {
                    this.MaxY += yspeed;
                    if (this.MaxY < this.ToMaxY)
                        this.MaxY = this.ToMaxY;
                }
            }
            else {
                this.MinY = this.ToMinY;
            }
        }

        maxY = this.MaxY;
        if (this.ToMaxY < maxY) {
            var viewY = CameraY + View.GetHeight(0);
            if (viewY >= maxY)
                viewY = maxY - 2; // - this.BoundPanningSpeed;
            this.MaxY = viewY;
        }

        maxY = this.MaxY;
        if (this.ToMaxY > maxY) {
            if (CameraY + View.GetHeight(0) >= maxY) {
                this.MaxY = maxY + 2; // + this.BoundPanningSpeed;
                if (yspeed > 0.0) {
                    this.MaxY += yspeed;
                    if (this.MaxY > this.ToMaxY)
                        this.MaxY = this.ToMaxY;
                }
            }
            else {
                this.MaxY = this.ToMaxY;
            }
        }
    }
    event MoveViewPosition() {
        var viewIndex = 0;
        var width = View.GetWidth(viewIndex);
        var height = View.GetHeight(viewIndex);
        var widthHalf = width * 0.5;
        var heightHalf = height * 0.5;
        var finalX = this.X + this.OffsetX - widthHalf;
        var finalY = this.Y + this.OffsetY - this.CustomViewHeightHalf;

        finalX = Math.Clamp(finalX, this.MinX, this.MaxX - width);
        finalY = Math.Clamp(finalY, this.MinY, this.MaxY - height);

        // In Mania, shake position is incorrectly added here, not clamping it afterwards.
        // Let's at least clamp it.

        finalX += this.ShakeX;
        finalY += this.ShakeY;
        finalX = Math.Clamp(finalX, 0.0, this.LevelWidth - width);
        finalY = Math.Clamp(finalY, 0.0, this.LevelHeight - height);
        this.ClampedShakenX = finalX + widthHalf;
        this.ClampedShakenY = finalY + heightHalf;

        CameraX = finalX;
        CameraY = finalY;
    }

    event HandleVertMove() {
        var player = this.PlayerPtr;
        if (!player)
            return;

        this.Camera_MoveBoundsY();

        var offsetY = this.SetOnJump;
        var initialY = this.Y;
        var playerY = player.Y + this.DestinationOffsetY - 0.0 - this.Camera_Unk_0x9C;
        var maxCameraYSpeed = this.MaxCameraYSpeed;

        if (playerY <= initialY + offsetY) {
            if (playerY < initialY - offsetY) {
                offsetY = playerY + offsetY - initialY;
                if (offsetY < -maxCameraYSpeed)
                    offsetY = -maxCameraYSpeed;
                this.Y = initialY + offsetY;
            }
        }
        else {
            offsetY = playerY - offsetY - initialY;
            if (offsetY > maxCameraYSpeed)
                offsetY = maxCameraYSpeed;
            this.Y = initialY + offsetY;
        }
    }

    event Camera_StatusNormal() {
        var player = this.PlayerPtr;
        if (!player)
            return;

        // this.Camera_MoveBoundsX();

        var offsetX;
        var initialX = this.X;
        var playerX = player.X + this.DestinationOffsetX;
        var minFollowDistanceX = this.MinFollowDistanceX;
        var maxCameraXSpeed = this.MaxCameraXSpeed;

        if (playerX <= initialX + minFollowDistanceX) {
            if (playerX < initialX - minFollowDistanceX) {
                offsetX = playerX + minFollowDistanceX - initialX;
                if (offsetX < -maxCameraXSpeed)
                    offsetX = -maxCameraXSpeed;
                this.X = initialX + offsetX;
            }
        }
        else {
            offsetX = playerX - minFollowDistanceX - initialX;
            if (offsetX > maxCameraXSpeed)
                offsetX = maxCameraXSpeed;
            this.X = initialX + offsetX;
        }

        this.HandleVertMove();
    }
    event Camera_StatusNonFollow() {
        this.HandleVertMove();
    }
}
