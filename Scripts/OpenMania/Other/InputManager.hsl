var GLOBAL_KeyUp = Key_W;
var GLOBAL_KeyDown = Key_S;
var GLOBAL_KeyLeft = Key_A;
var GLOBAL_KeyRight = Key_D;
var GLOBAL_KeyPause = Key_RETURN;
var GLOBAL_KeyAccept = Key_J;
var GLOBAL_KeyDecline = Key_K;
var GLOBAL_KeyExtra1 = Key_L;
var GLOBAL_KeyExtra2 = Key_I;

var GLOBAL_JoyUp = 11;
var GLOBAL_JoyDown = 12;
var GLOBAL_JoyLeft = 13;
var GLOBAL_JoyRight = 14;
var GLOBAL_JoyExtra1 = 0;
var GLOBAL_JoyExtra2 = 1;
var GLOBAL_JoyAction3 = 2;
var GLOBAL_JoyPause = 3;

class InputManager {
    event Create() {
        this.Up = false;
        this.Down = false;
        this.Left = false;
        this.Right = false;
        this.Pause = false;
        this.Accept = false;
        this.Decline = false;
        this.Extra1 = false;
        this.Extra2 = false;
        this.Any = false;

        this.UpPressed = false;
        this.DownPressed = false;
        this.LeftPressed = false;
        this.RightPressed = false;
        this.PausePressed = false;
        this.AcceptPressed = false;
        this.DeclinePressed = false;
        this.Extra1Pressed = false;
        this.Extra2Pressed = false;
        this.AnyPressed = false;

        this.Pauseable = false;

        this.ListenType = 0;

        // Default Control Configs:
        // NOTE: Up, Down, Left, Right, Pause, Accept, Decline, Extra1, Extra2

        this.ControllerMappings = {
            "Xbox Wireless Controller": [ 32, 32, 32, 32, 11, 0, 1, 3, 4 ],
            "Microsoft X-Box 360 pad": [ 11, 12, 13, 14, 6, 0, 1, 2, 3 ],
            /*
             0: A, 1: B, 2: X, 3: Y
             4: Back, 5: Home, 6: Pause
             7: LStick, 8: RStick, 9: LB, 10: RB
            11: DUp, 12: DDown, 13: DLeft, 14: DRight
            */
            "XInput Controller": [ 32, 32, 32, 32, 7, 0, 1, 2, 3 ],
            /*
             0: A, 1: B, 2: X, 3: Y
             4: LB, 5: RB
             6: Back, 7: Pause
             8: LStick, 9: RStick
            10: Home
            */
            "Switch (Native)": [ 13, 15, 12, 14, 10, 0, 1, 2, 3 ],
            /*
             0: A, 1: B, 2: X, 3: Y
             4: LStick, 5: RStick
             6: L, 7: R, 8: ZL, 9: ZR
            10: Plus, 11: Minus
            12: DUp, 13: DDown, 14: DLeft, 15: DRight
            */
        };

        this.OutKeys = Array.Create(32);
        this.OutJoys = Array.Create(32);
        this.FirstFrame = true;

        for (var i = 0; i < 4; i++) {
            if (Input.GetControllerAttached(i)) {
                var controller_name = Input.GetControllerName(i);
                print "ID: " + i + " | " + controller_name;
            }
        }
    }

    event Update() {
        this.GetInput();
        this.FirstFrame = false;
    }

    event GetInput() {
        var key = this.GetInputFromKeys();
        for (var i = 0; i < 9; i++) {
            if (key[i]) {
                this.ListenType = 0;
                break;
            }
        }

        var joy = this.GetInputFromJoystick();
        for (var i = 0; i < 9; i++) {
            if (joy[i]) {
                this.ListenType = 1;
                break;
            }
        }

        var listenTo = key;
        if (this.ListenType == 1)
            listenTo = joy;

        this.Up                 = listenTo[0];
        this.Down               = listenTo[1];
        this.Left               = listenTo[2];
        this.Right              = listenTo[3];
        this.Pause              = listenTo[4];
        this.Accept             = listenTo[5];
        this.Decline            = listenTo[6];
        this.Extra1             = listenTo[7];
        this.Extra2             = listenTo[8];

        this.UpPressed          = listenTo[9];
        this.DownPressed        = listenTo[10];
        this.LeftPressed        = listenTo[11];
        this.RightPressed       = listenTo[12];
        this.PausePressed       = listenTo[13];
        this.AcceptPressed      = listenTo[14];
        this.DeclinePressed     = listenTo[15];
        this.Extra1Pressed      = listenTo[16];
        this.Extra2Pressed      = listenTo[17];

        this.Any =
            this.Up |
            this.Down |
            this.Left |
            this.Right |
            this.Pause |
            this.Accept |
            this.Decline |
            this.Extra1 |
            this.Extra2;
        this.AnyPressed =
            this.UpPressed |
            this.DownPressed |
            this.LeftPressed |
            this.RightPressed |
            this.PausePressed |
            this.AcceptPressed |
            this.DeclinePressed |
            this.Extra1Pressed |
            this.Extra2Pressed;
    }
    event GetInputFromKeys() {
        var out = this.OutKeys;
        out[0]  = Input.IsKeyDown(GLOBAL_KeyUp);
        out[1]  = Input.IsKeyDown(GLOBAL_KeyDown);
        out[2]  = Input.IsKeyDown(GLOBAL_KeyLeft);
        out[3]  = Input.IsKeyDown(GLOBAL_KeyRight);
        out[4]  = Input.IsKeyDown(GLOBAL_KeyPause);
        out[5]  = Input.IsKeyDown(GLOBAL_KeyAccept);
        out[6]  = Input.IsKeyDown(GLOBAL_KeyDecline);
        out[7]  = Input.IsKeyDown(GLOBAL_KeyExtra1);
        out[8]  = Input.IsKeyDown(GLOBAL_KeyExtra2);
        out[9]  = Input.IsKeyPressed(GLOBAL_KeyUp);
        out[10] = Input.IsKeyPressed(GLOBAL_KeyDown);
        out[11] = Input.IsKeyPressed(GLOBAL_KeyLeft);
        out[12] = Input.IsKeyPressed(GLOBAL_KeyRight);
        out[13] = Input.IsKeyPressed(GLOBAL_KeyPause);
        out[14] = Input.IsKeyPressed(GLOBAL_KeyAccept);
        out[15] = Input.IsKeyPressed(GLOBAL_KeyDecline);
        out[16] = Input.IsKeyPressed(GLOBAL_KeyExtra1);
        out[17] = Input.IsKeyPressed(GLOBAL_KeyExtra2);
        return out;
    }
    event GetInputFromJoystick() {
        var out = this.OutJoys;
        out[0]  =
        out[1]  =
        out[2]  =
        out[3]  =
        out[4]  =
        out[5]  =
        out[6]  =
        out[7]  =
        out[8]  =
        out[9]  =
        out[10] =
        out[11] =
        out[12] =
        out[13] =
        out[14] =
        out[15] =
        out[16] =
        out[17] = false;

        var controller_index = 0;
        var controller_deadzone = 0.5;

        if (Input.GetControllerAttached(controller_index)) {
            var mapping;
            var controller_name = Input.GetControllerName(controller_index);
            var up, down, left, right, pause, accept, decline, extra1, extra2;

            // Stick controls
            out[0]  = Input.GetControllerAxis(controller_index, 1) < -controller_deadzone;
            out[1]  = Input.GetControllerAxis(controller_index, 1) >  controller_deadzone;
            out[2]  = Input.GetControllerAxis(controller_index, 0) < -controller_deadzone;
            out[3]  = Input.GetControllerAxis(controller_index, 0) >  controller_deadzone;
            // Hat controls
            out[0] |= (Input.GetControllerHat(controller_index, 0) & 1) == 1;
            out[1] |= (Input.GetControllerHat(controller_index, 0) & 4) == 4;
            out[2] |= (Input.GetControllerHat(controller_index, 0) & 8) == 8;
            out[3] |= (Input.GetControllerHat(controller_index, 0) & 2) == 2;

            // If on native Switch
            if (Device.GetPlatform() == Platform_Switch)
                controller_name = "Switch (Native)";
            else if (String.Contains(controller_name, "XInput Controller"))
                controller_name = "XInput Controller";

            // Find mapping
            if (mapping = this.ControllerMappings[controller_name]) {
                for (var i = 0; i < 9; i++)
                    out[i] |= Input.GetControllerButton(controller_index, mapping[i]);
            }
            else {
                // Generic Controller support
                out[4] |= Input.GetControllerButton(controller_index, 7); // Pause
                for (var i = 0; i < 4; i++)
                    out[i + 5] |= Input.GetControllerButton(controller_index, i); // Accept, Decline, Extra1, Extra2
            }

            if (!this.FirstFrame) {
                // Determine "pressed" state for buttons
                out[9]  = out[0] && !this.Up;
                out[10] = out[1] && !this.Down;
                out[11] = out[2] && !this.Left;
                out[12] = out[3] && !this.Right;
                out[13] = out[4] && !this.Pause;
                out[14] = out[5] && !this.Accept;
                out[15] = out[6] && !this.Decline;
                out[16] = out[7] && !this.Extra1;
                out[17] = out[8] && !this.Extra2;
            }
        }

        return out;
    }
}
