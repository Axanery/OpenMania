class TitleBG {
    Create(flag) {
        this.Priority = 1;
        this.Sprite = Resources.LoadSprite("Sprites/Title/Background.bin", SCOPE_SCENE);
        this.SetAnimation(0, 0);
        this.Type = this.PropertyGet("type");

        this.Status = null;
        this.RenderStatus = null;

        this.X -= 4.0;

        this.Opacity = 1.0;
        this.BlendFlag = BlendMode_NORMAL;
        switch (this.Type) {
            case 0:
                this.BlendFlag = BlendMode_NORMAL;
                this.Status = this.TitleBG_Status_MountainTop;
                break;
            case 1:
                this.Opacity = 0.5;
                this.Status = this.TitleBG_Status_MountainTop;
                break;
            case 2:
            case 3:
                this.Priority = 1;
                this.Opacity = 0.5;
                this.BlendFlag = BlendMode_ADD;
                this.Status = this.TitleBG_Status_MountainTop;
                break;
            case 4:
                this.Priority = 4;
                this.BlendFlag = BlendMode_MATCH_EQUAL;
                this.Status = this.TitleBG_Status_WingShine;
                break;
        }

        this.SetAnimation(this.Type, 0);

        Scene.SetLayerVisible(2, true);
        Scene.SetLayerVisible(3, true);
        Scene.SetLayerVisible(4, true);

        View.SetX(0, (512.0 - View.GetWidth(0)) * 0.5);

        this.UpdateEarly = Instance.GetNth("TitleBG", 0) == this;

        if (this.UpdateEarly) {
            Scene.SetLayerCustomScanlineFunction(2, this.Clouds_TileScanLineFunction);
            Scene.SetLayerCustomScanlineFunction(3, this.Island_TileScanLineFunction);
        }
    }

    Clouds_TileScanLineFunction() {
        var vw = View.GetWidth(0);

        var distX, distY, projectedX, projectedY, dX, dY, sX, sY;
        var sinVal = Static.HexSin(0);
        var cosVal = Static.HexCos(0);
        var viewHalfW = vw * 0.5;
        var tileSrcY = 256.0;
        var scrollPosition = (Scene_Frame * 0.5) % 256.0;
        var scanLine = 0;
        var layerSize = 256.0;
        for (var i = 160.0; i >= 32.0; i -= 1.0) {
            distX = tileSrcY / (8.0 * i);
            distY = distX;
            projectedX = cosVal * distX;
            projectedY = sinVal * distY;
            dX = -projectedX * 2.0;
            dY = projectedY * 2.0;
            sX = -viewHalfW * dX + projectedY * layerSize;
            sY = -viewHalfW * dY + projectedX * layerSize * 2.0 + scrollPosition;

            Scene.SetTileScanline(scanLine, sX, sY, dX, dY);

            tileSrcY -= 0.25;
            scanLine++;
        }

        Draw.SetClip(0, 0, vw, 120);
    }
    Island_TileScanLineFunction() {
        var vw = View.GetWidth(0);

        var dist, projectedX, projectedY, dX, dY, sX, sY;

        var scanLine = 168;

        var spin = -Scene_Frame;
        var sinVal = Static.HexSinHighPrec(spin);
        var cosVal = Static.HexCosHighPrec(spin);
        var viewHalfW = vw * 0.5;
        var tileSrcY = 256.0;
        var layerSize = 160.0;

        var sv = sinVal * 160.0;
        var cv = cosVal * 160.0;
        for (var i = 16; i < 88; i++) {
            dist = 160.0 / (8.0 * i);
            projectedX = cosVal * dist;
            projectedY = sinVal * dist;
            dX = -projectedX * 2.0;
            dY =  projectedY * 2.0;
            sX = -viewHalfW * dX + projectedY * 256.0 - sv + 512.0;
            sY = -viewHalfW * dY + projectedX * 256.0 - cv + 512.0;

            Scene.SetTileScanline(scanLine, sX, sY, dX, dY);

            tileSrcY -= 0.25;
            scanLine++;
        }

        Draw.SetClip(0, 168, vw, 80);
    }

    Update() {
        if (this.Status)
            this.Status();

        if (this.UpdateEarly) {
            if (Scene_Frame % 6 == 0) {
                Palette.RotateColorsLeft(0, 0x8C, 4);
            }
        }
    }
    TitleBG_Status_MountainTop() {
        this.X -= 1.0;
        if (this.X < -128.0)
            this.X += 768.0;
    }
    TitleBG_Status_WingShine() {
        this.Y = 64.0 + ((Scene_Frame) & 0x1F);
    }

    Render() {
        Draw.SetCompareColor(0x00FF00);
        Draw.SetBlendMode(this.BlendFlag);
        Draw.SetTextureBlend(true);

        Draw.SetBlendColor(0xFFFFFF, this.Opacity);
        Draw.Sprite(this.Sprite, this.CurrentAnimation, this.CurrentFrame, this.X, this.Y, false, false);

        Draw.SetTextureBlend(false);
        Draw.SetBlendMode(BlendMode_NORMAL);
    }
}
